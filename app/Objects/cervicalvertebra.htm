<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\cervicalvertebra.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\cervicalvertebra.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Nov 20 20:36:39 2019
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HardWareInit &rArr; UartInit &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">NMI_Handler</a><BR>
 <LI><a href="#[4c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">SVC_Handler</a><BR>
 <LI><a href="#[4d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">PendSV_Handler</a><BR>
 <LI><a href="#[4e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[78]">CtsIntCallBack</a> from uarthandler.o(i.CtsIntCallBack) referenced from uarthandler.o(i.UartInit)
 <LI><a href="#[72]">DmaContIrqCallback</a> from adcsample.o(i.DmaContIrqCallback) referenced from adcsample.o(i.AdcSampleInit)
 <LI><a href="#[40]">Ems_AB_And_CD_Four</a> from ems_port.o(i.Ems_AB_And_CD_Four) referenced 2 times from ems.o(.data)
 <LI><a href="#[48]">Ems_AToB_And_Ems_CToD_PNAlter_N</a> from ems_port.o(i.Ems_AToB_And_Ems_CToD_PNAlter_N) referenced 6 times from ems.o(.data)
 <LI><a href="#[46]">Ems_AToB_And_Ems_CToD_PNAlter_P</a> from ems_port.o(i.Ems_AToB_And_Ems_CToD_PNAlter_P) referenced 6 times from ems.o(.data)
 <LI><a href="#[44]">Ems_AToB_Ems_CToD_FS_N</a> from ems_port.o(i.Ems_AToB_Ems_CToD_FS_N) referenced 4 times from ems.o(.data)
 <LI><a href="#[42]">Ems_AToB_Ems_CToD_FS_P</a> from ems_port.o(i.Ems_AToB_Ems_CToD_FS_P) referenced 4 times from ems.o(.data)
 <LI><a href="#[3f]">Ems_A_To_Ems_B_Double</a> from ems_port.o(i.Ems_A_To_Ems_B_Double) referenced 4 times from ems.o(.data)
 <LI><a href="#[47]">Ems_A_To_Ems_B_PNAlter_N</a> from ems_port.o(i.Ems_A_To_Ems_B_PNAlter_N) referenced 12 times from ems.o(.data)
 <LI><a href="#[45]">Ems_A_To_Ems_B_PNAlter_P</a> from ems_port.o(i.Ems_A_To_Ems_B_PNAlter_P) referenced 12 times from ems.o(.data)
 <LI><a href="#[43]">Ems_A_To_Ems_B_Single_N</a> from ems_port.o(i.Ems_A_To_Ems_B_Single_N) referenced 8 times from ems.o(.data)
 <LI><a href="#[41]">Ems_A_To_Ems_B_Single_P</a> from ems_port.o(i.Ems_A_To_Ems_B_Single_P) referenced 8 times from ems.o(.data)
 <LI><a href="#[76]">ErrIntCallback</a> from uarthandler.o(i.ErrIntCallback) referenced from uarthandler.o(i.UartInit)
 <LI><a href="#[4b]">HardFault_Handler</a> from interrupts_hc32l136.o(i.HardFault_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[4f]">IRQ000_Handler</a> from interrupts_hc32l136.o(i.IRQ000_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[50]">IRQ001_Handler</a> from interrupts_hc32l136.o(i.IRQ001_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[51]">IRQ002_Handler</a> from interrupts_hc32l136.o(i.IRQ002_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[52]">IRQ003_Handler</a> from interrupts_hc32l136.o(i.IRQ003_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[53]">IRQ004_Handler</a> from interrupts_hc32l136.o(i.IRQ004_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[54]">IRQ005_Handler</a> from interrupts_hc32l136.o(i.IRQ005_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[55]">IRQ006_Handler</a> from interrupts_hc32l136.o(i.IRQ006_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[56]">IRQ007_Handler</a> from interrupts_hc32l136.o(i.IRQ007_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[57]">IRQ008_Handler</a> from interrupts_hc32l136.o(i.IRQ008_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[58]">IRQ009_Handler</a> from interrupts_hc32l136.o(i.IRQ009_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[59]">IRQ010_Handler</a> from interrupts_hc32l136.o(i.IRQ010_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5a]">IRQ011_Handler</a> from interrupts_hc32l136.o(i.IRQ011_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5b]">IRQ012_Handler</a> from interrupts_hc32l136.o(i.IRQ012_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5c]">IRQ013_Handler</a> from interrupts_hc32l136.o(i.IRQ013_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5d]">IRQ014_Handler</a> from interrupts_hc32l136.o(i.IRQ014_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5e]">IRQ015_Handler</a> from interrupts_hc32l136.o(i.IRQ015_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5f]">IRQ016_Handler</a> from interrupts_hc32l136.o(i.IRQ016_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[60]">IRQ017_Handler</a> from interrupts_hc32l136.o(i.IRQ017_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[61]">IRQ018_Handler</a> from interrupts_hc32l136.o(i.IRQ018_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[62]">IRQ019_Handler</a> from interrupts_hc32l136.o(i.IRQ019_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[63]">IRQ020_Handler</a> from interrupts_hc32l136.o(i.IRQ020_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[64]">IRQ021_Handler</a> from interrupts_hc32l136.o(i.IRQ021_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[65]">IRQ022_Handler</a> from interrupts_hc32l136.o(i.IRQ022_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[66]">IRQ023_Handler</a> from interrupts_hc32l136.o(i.IRQ023_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[67]">IRQ024_Handler</a> from interrupts_hc32l136.o(i.IRQ024_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[68]">IRQ025_Handler</a> from interrupts_hc32l136.o(i.IRQ025_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[69]">IRQ026_Handler</a> from interrupts_hc32l136.o(i.IRQ026_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6a]">IRQ027_Handler</a> from interrupts_hc32l136.o(i.IRQ027_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6b]">IRQ028_Handler</a> from interrupts_hc32l136.o(i.IRQ028_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6c]">IRQ029_Handler</a> from interrupts_hc32l136.o(i.IRQ029_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6d]">IRQ030_Handler</a> from interrupts_hc32l136.o(i.IRQ030_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6e]">IRQ031_Handler</a> from interrupts_hc32l136.o(i.IRQ031_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[3d]">ModifyOne</a> from ems.o(i.ModifyOne) referenced 2 times from ems.o(.data)
 <LI><a href="#[3e]">ModifyTwo</a> from ems.o(i.ModifyTwo) referenced 2 times from ems.o(.data)
 <LI><a href="#[4a]">NMI_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[77]">PErrIntCallBack</a> from uarthandler.o(i.PErrIntCallBack) referenced from uarthandler.o(i.UartInit)
 <LI><a href="#[4d]">PendSV_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[49]">Reset_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[74]">RxIntCallback</a> from uarthandler.o(i.RxIntCallback) referenced from uarthandler.o(i.UartInit)
 <LI><a href="#[4c]">SVC_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[4e]">SysTick_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[70]">SystemInit</a> from system_hc32l136.o(i.SystemInit) referenced from startup_hc32l136.o(.text)
 <LI><a href="#[79]">Tim2Int</a> from timehandler.o(i.Tim2Int) referenced from timehandler.o(i.Update2Time)
 <LI><a href="#[73]">Time0IntCallback</a> from timehandler.o(i.Time0IntCallback) referenced from timehandler.o(i.TimestampInit)
 <LI><a href="#[7a]">Time3IntCallback</a> from timehandler.o(i.Time3IntCallback) referenced from timehandler.o(i.breathing_LightInit)
 <LI><a href="#[75]">TxIntCallback</a> from uarthandler.o(i.TxIntCallback) referenced from uarthandler.o(i.UartInit)
 <LI><a href="#[3a]">_DirABAuto_And_CDAuto_PN</a> from ems.o(i._DirABAuto_And_CDAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[36]">_DirABC_T_D_PN</a> from ems.o(i._DirABC_T_D_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[37]">_DirABD_T_C_PN</a> from ems.o(i._DirABD_T_C_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[1]">_DirAB_And_CD_DisCharge</a> from ems.o(i._DirAB_And_CD_DisCharge) referenced 2 times from ems.o(.data)
 <LI><a href="#[0]">_DirAB_And_CD_IDLE</a> from ems.o(i._DirAB_And_CD_IDLE) referenced 2 times from ems.o(.data)
 <LI><a href="#[3b]">_DirACAutO_And_BDAut0_PN</a> from ems.o(i._DirACAutO_And_BDAut0_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[38]">_DirACD_T_B_PN</a> from ems.o(i._DirACD_T_B_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[3c]">_DirADAuto_And_BCAuto_PN</a> from ems.o(i._DirADAuto_And_BCAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[5]">_DirA_T_B_And_CDAuto_PN</a> from ems.o(i._DirA_T_B_And_CDAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[2]">_DirA_T_B_And_CD_No</a> from ems.o(i._DirA_T_B_And_CD_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[2a]">_DirA_T_B_And_CD_No_PN</a> from ems.o(i._DirA_T_B_And_CD_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[3]">_DirA_T_B_And_C_T_D</a> from ems.o(i._DirA_T_B_And_C_T_D) referenced 2 times from ems.o(.data)
 <LI><a href="#[4]">_DirA_T_B_And_D_T_C</a> from ems.o(i._DirA_T_B_And_D_T_C) referenced 2 times from ems.o(.data)
 <LI><a href="#[9]">_DirA_T_C_And_BDAuto_PN</a> from ems.o(i._DirA_T_C_And_BDAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[6]">_DirA_T_C_And_BD_No</a> from ems.o(i._DirA_T_C_And_BD_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[2b]">_DirA_T_C_And_BD_No_PN</a> from ems.o(i._DirA_T_C_And_BD_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[7]">_DirA_T_C_And_B_T_D</a> from ems.o(i._DirA_T_C_And_B_T_D) referenced 2 times from ems.o(.data)
 <LI><a href="#[8]">_DirA_T_C_And_D_T_B</a> from ems.o(i._DirA_T_C_And_D_T_B) referenced 2 times from ems.o(.data)
 <LI><a href="#[d]">_DirA_T_D_And_BCAuto_PN</a> from ems.o(i._DirA_T_D_And_BCAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[a]">_DirA_T_D_And_BC_No</a> from ems.o(i._DirA_T_D_And_BC_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[2c]">_DirA_T_D_And_BC_No_PN</a> from ems.o(i._DirA_T_D_And_BC_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[b]">_DirA_T_D_And_B_T_C</a> from ems.o(i._DirA_T_D_And_B_T_C) referenced 2 times from ems.o(.data)
 <LI><a href="#[c]">_DirA_T_D_And_C_T_B</a> from ems.o(i._DirA_T_D_And_C_T_B) referenced 2 times from ems.o(.data)
 <LI><a href="#[11]">_DirB_T_A_And_CDAuto_PN</a> from ems.o(i._DirB_T_A_And_CDAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[e]">_DirB_T_A_And_CD_No</a> from ems.o(i._DirB_T_A_And_CD_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[2d]">_DirB_T_A_And_CD_No_PN</a> from ems.o(i._DirB_T_A_And_CD_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[f]">_DirB_T_A_And_C_T_D</a> from ems.o(i._DirB_T_A_And_C_T_D) referenced 2 times from ems.o(.data)
 <LI><a href="#[10]">_DirB_T_A_And_D_T_C</a> from ems.o(i._DirB_T_A_And_D_T_C) referenced 2 times from ems.o(.data)
 <LI><a href="#[15]">_DirB_T_C_And_ADAuto_PN</a> from ems.o(i._DirB_T_C_And_ADAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[12]">_DirB_T_C_And_AD_No</a> from ems.o(i._DirB_T_C_And_AD_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[2e]">_DirB_T_C_And_AD_No_PN</a> from ems.o(i._DirB_T_C_And_AD_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[13]">_DirB_T_C_And_A_T_D</a> from ems.o(i._DirB_T_C_And_A_T_D) referenced 2 times from ems.o(.data)
 <LI><a href="#[14]">_DirB_T_C_And_D_T_A</a> from ems.o(i._DirB_T_C_And_D_T_A) referenced 2 times from ems.o(.data)
 <LI><a href="#[19]">_DirB_T_D_And_ACAuto_PN</a> from ems.o(i._DirB_T_D_And_ACAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[16]">_DirB_T_D_And_AC_No</a> from ems.o(i._DirB_T_D_And_AC_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[2f]">_DirB_T_D_And_AC_No_PN</a> from ems.o(i._DirB_T_D_And_AC_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[17]">_DirB_T_D_And_A_T_C</a> from ems.o(i._DirB_T_D_And_A_T_C) referenced 2 times from ems.o(.data)
 <LI><a href="#[18]">_DirB_T_D_And_C_T_A</a> from ems.o(i._DirB_T_D_And_C_T_A) referenced 2 times from ems.o(.data)
 <LI><a href="#[39]">_DirCBD_T_A_PN</a> from ems.o(i._DirCBD_T_A_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[1d]">_DirC_T_A_And_BDAuto_PN</a> from ems.o(i._DirC_T_A_And_BDAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[1a]">_DirC_T_A_And_BD_No</a> from ems.o(i._DirC_T_A_And_BD_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[30]">_DirC_T_A_And_BD_No_PN</a> from ems.o(i._DirC_T_A_And_BD_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[1b]">_DirC_T_A_And_B_T_D</a> from ems.o(i._DirC_T_A_And_B_T_D) referenced 2 times from ems.o(.data)
 <LI><a href="#[1c]">_DirC_T_A_And_D_T_B</a> from ems.o(i._DirC_T_A_And_D_T_B) referenced 2 times from ems.o(.data)
 <LI><a href="#[21]">_DirC_T_B_And_ADAuto_PN</a> from ems.o(i._DirC_T_B_And_ADAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[1e]">_DirC_T_B_And_AD_No</a> from ems.o(i._DirC_T_B_And_AD_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[31]">_DirC_T_B_And_AD_No_PN</a> from ems.o(i._DirC_T_B_And_AD_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[1f]">_DirC_T_B_And_A_T_D</a> from ems.o(i._DirC_T_B_And_A_T_D) referenced 2 times from ems.o(.data)
 <LI><a href="#[20]">_DirC_T_B_And_D_T_A</a> from ems.o(i._DirC_T_B_And_D_T_A) referenced 2 times from ems.o(.data)
 <LI><a href="#[25]">_DirC_T_D_And_ABAuto_PN</a> from ems.o(i._DirC_T_D_And_ABAuto_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[22]">_DirC_T_D_And_AB_No</a> from ems.o(i._DirC_T_D_And_AB_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[32]">_DirC_T_D_And_AB_No_PN</a> from ems.o(i._DirC_T_D_And_AB_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[23]">_DirC_T_D_And_A_T_B</a> from ems.o(i._DirC_T_D_And_A_T_B) referenced 2 times from ems.o(.data)
 <LI><a href="#[24]">_DirC_T_D_And_B_T_A</a> from ems.o(i._DirC_T_D_And_B_T_A) referenced 2 times from ems.o(.data)
 <LI><a href="#[29]">_DirD_T_A_And_BC_AutO_PN</a> from ems.o(i._DirD_T_A_And_BC_AutO_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[33]">_DirD_T_A_And_BC_No_PN</a> from ems.o(i._DirD_T_A_And_BC_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[28]">_DirD_T_A_And_B_T_C</a> from ems.o(i._DirD_T_A_And_B_T_C) referenced 2 times from ems.o(.data)
 <LI><a href="#[26]">_DirD_T_A_And_CB_No</a> from ems.o(i._DirD_T_A_And_CB_No) referenced 2 times from ems.o(.data)
 <LI><a href="#[27]">_DirD_T_A_And_C_T_B</a> from ems.o(i._DirD_T_A_And_C_T_B) referenced 2 times from ems.o(.data)
 <LI><a href="#[34]">_DirD_T_B_And_AC_No_PN</a> from ems.o(i._DirD_T_B_And_AC_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[35]">_DirD_T_C_And_AB_No_PN</a> from ems.o(i._DirD_T_C_And_AB_No_PN) referenced 2 times from ems.o(.data)
 <LI><a href="#[71]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32l136.o(.text)
 <LI><a href="#[6f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[71]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[86]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[166]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[167]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[168]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[169]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[16a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[49]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[16b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_CalScnt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostVoltageControl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmIdleHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmCHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage3DModelPwmCHandler
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTCSampleDataHandler
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTCSampleDataHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Status_Check
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTCSampleDataHandler
</UL>

<P><STRONG><a name="[170]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[80]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[171]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>AdcSampleInit</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, adcsample.o(i.AdcSampleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcSampleInit &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigSqrMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigSqrChannel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigDmaTrig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SQR_Start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalogMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_Start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_InitChannel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_EnableChannelIrq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_EnableChannel
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_Enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_ConfigIrq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SetVref
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[92]"></a>Adc_ConfigDmaTrig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc.o(i.Adc_ConfigDmaTrig))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[90]"></a>Adc_ConfigSqrChannel</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, adc.o(i.Adc_ConfigSqrChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adc_ConfigSqrChannel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[91]"></a>Adc_ConfigSqrMode</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, adc.o(i.Adc_ConfigSqrMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Adc_ConfigSqrMode
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[8c]"></a>Adc_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.Adc_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[8e]"></a>Adc_Init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, adc.o(i.Adc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[9a]"></a>Adc_SQR_Start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.Adc_SQR_Start))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[8f]"></a>Adc_SetVref</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, adc.o(i.Adc_SetVref))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[14e]"></a>Adt_CHxXPortConfig</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, adt.o(i.Adt_CHxXPortConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adt_CHxXPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[a6]"></a>Adt_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, adt.o(i.Adt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adt_Init &rArr; AdtEnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdtEnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[b2]"></a>Adt_SetCompareValue</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, adt.o(i.Adt_SetCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Adt_SetCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_Pwm
</UL>

<P><STRONG><a name="[14d]"></a>Adt_SetPeriod</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adt.o(i.Adt_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adt_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[b4]"></a>Adt_StartCount</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adt.o(i.Adt_StartCount))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_Start
</UL>

<P><STRONG><a name="[a7]"></a>Battery_Chg_Compl_Status_Check</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, key.o(i.Battery_Chg_Compl_Status_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Battery_Chg_Compl_Status_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
</UL>

<P><STRONG><a name="[a9]"></a>Battery_Chg_Compl_Status_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, key.o(i.Battery_Chg_Compl_Status_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Battery_Chg_Compl_Status_Init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[ac]"></a>Battery_Chg_Status_Pin_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, key.o(i.Battery_Chg_Status_Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Battery_Chg_Status_Pin_Init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[ad]"></a>Battery_Chg_Status_Pin_Scan</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, key.o(i.Battery_Chg_Status_Pin_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Battery_Chg_Status_Pin_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Status_Check
</UL>

<P><STRONG><a name="[b1]"></a>Boost_Pwm</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, timehandler.o(i.Boost_Pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Boost_Pwm &rArr; Adt_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_SetCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Output_Close
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostVoltageControl
</UL>

<P><STRONG><a name="[b3]"></a>Boost_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timehandler.o(i.Boost_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Boost_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_StartCount
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Start
</UL>

<P><STRONG><a name="[153]"></a>Bt_ClearAllIntFlag</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt.o(i.Bt_ClearAllIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_ClearAllIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[147]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Int
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0IntCallback
</UL>

<P><STRONG><a name="[146]"></a>Bt_GetIntFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt.o(i.Bt_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Int
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0IntCallback
</UL>

<P><STRONG><a name="[150]"></a>Bt_M23_ARRSet</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bt.o(i.Bt_M23_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bt_M23_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[152]"></a>Bt_M23_Cnt16Set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M23_Cnt16Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M23_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[158]"></a>Bt_M23_EnPWM_Output</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, bt.o(i.Bt_M23_EnPWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bt_M23_EnPWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
</UL>

<P><STRONG><a name="[155]"></a>Bt_M23_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_M23_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M23_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[151]"></a>Bt_M23_SetValidPeriod</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bt.o(i.Bt_M23_SetValidPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_M23_SetValidPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[154]"></a>Bt_Mode23_EnableIrq</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, bt.o(i.Bt_Mode23_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_Mode23_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[14f]"></a>Bt_Mode23_Init</STRONG> (Thumb, 596 bytes, Stack size 12 bytes, bt.o(i.Bt_Mode23_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_Mode23_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[ba]"></a>CompareParaSize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, util.o(i.CompareParaSize))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSControlHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternBoardCheckHandler
</UL>

<P><STRONG><a name="[78]"></a>CtsIntCallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uarthandler.o(i.CtsIntCallBack))
<BR>[Address Reference Count : 1]<UL><LI> uarthandler.o(i.UartInit)
</UL>
<P><STRONG><a name="[8d]"></a>Delay_us</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adcsample.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[72]"></a>DmaContIrqCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adcsample.o(i.DmaContIrqCallback))
<BR>[Address Reference Count : 1]<UL><LI> adcsample.o(i.AdcSampleInit)
</UL>
<P><STRONG><a name="[96]"></a>Dma_ConfigIrq</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dmac.o(i.Dma_ConfigIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma_ConfigIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[97]"></a>Dma_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dmac.o(i.Dma_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[98]"></a>Dma_EnableChannel</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dmac.o(i.Dma_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[94]"></a>Dma_EnableChannelIrq</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dmac.o(i.Dma_EnableChannelIrq))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[120]"></a>Dma_IRQHandler</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, dmac.o(i.Dma_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>

<P><STRONG><a name="[93]"></a>Dma_InitChannel</STRONG> (Thumb, 658 bytes, Stack size 8 bytes, dmac.o(i.Dma_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma_InitChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[99]"></a>Dma_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dmac.o(i.Dma_Start))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[b9]"></a>EMSControlHandler</STRONG> (Thumb, 978 bytes, Stack size 8 bytes, ems.o(i.EMSControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EMSControlHandler &rArr; BoostVoltageControl &rArr; Boost_Pwm &rArr; Adt_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareParaSize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostVoltageControl
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_CallTask
</UL>

<P><STRONG><a name="[bf]"></a>EMS_Port_Check_Pin_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, key.o(i.EMS_Port_Check_Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EMS_Port_Check_Pin_Init &rArr; Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[c1]"></a>EMS_Port_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ems_port.o(i.EMS_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EMS_Port_Init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[c8]"></a>EMS_Port_Pin_Status</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, key.o(i.EMS_Port_Pin_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMS_Port_Pin_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Status_Check
</UL>

<P><STRONG><a name="[c3]"></a>EMS_PwmControl</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ems.o(i.EMS_PwmControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EMS_PwmControl &rArr; Massage3DModelPwmCHandler &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmIdleHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmCHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage3DModelPwmCHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time0IntCallback
</UL>

<P><STRONG><a name="[c9]"></a>EmsABAuto_And_CDAuto_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsABAuto_And_CDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsABAuto_And_CDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirABAuto_And_CDAuto_PN
</UL>

<P><STRONG><a name="[cc]"></a>EmsABC_T_D_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsABC_T_D_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsABC_T_D_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirABC_T_D_PN
</UL>

<P><STRONG><a name="[cd]"></a>EmsABD_T_C_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsABD_T_C_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsABD_T_C_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirABD_T_C_PN
</UL>

<P><STRONG><a name="[ce]"></a>EmsACAutO_And_BDAuto_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsACAutO_And_BDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsACAutO_And_BDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirACAutO_And_BDAut0_PN
</UL>

<P><STRONG><a name="[cf]"></a>EmsACD_T_B_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsACD_T_B_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsACD_T_B_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirACD_T_B_PN
</UL>

<P><STRONG><a name="[d0]"></a>EmsADAuto_And_BCAuto_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsADAuto_And_BCAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsADAuto_And_BCAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirADAuto_And_BCAuto_PN
</UL>

<P><STRONG><a name="[d1]"></a>EmsA_T_B_And_CDAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsA_T_B_And_CDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsA_T_B_And_CDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_B_And_CDAuto_PN
</UL>

<P><STRONG><a name="[d2]"></a>EmsA_T_B_And_C_T_D</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsA_T_B_And_C_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsA_T_B_And_C_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_B_And_C_T_D
</UL>

<P><STRONG><a name="[d3]"></a>EmsA_T_B_And_D_T_C</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsA_T_B_And_D_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsA_T_B_And_D_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_B_And_D_T_C
</UL>

<P><STRONG><a name="[d4]"></a>EmsA_T_C_And_BDAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsA_T_C_And_BDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsA_T_C_And_BDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_C_And_BDAuto_PN
</UL>

<P><STRONG><a name="[d5]"></a>EmsA_T_C_And_BD_No_PN</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, ems_port.o(i.EmsA_T_C_And_BD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsA_T_C_And_BD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_C_And_BD_No_PN
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_C_And_BD_No
</UL>

<P><STRONG><a name="[d6]"></a>EmsA_T_C_And_B_T_D</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsA_T_C_And_B_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsA_T_C_And_B_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_C_And_B_T_D
</UL>

<P><STRONG><a name="[d7]"></a>EmsA_T_C_And_D_T_B</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsA_T_C_And_D_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsA_T_C_And_D_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_C_And_D_T_B
</UL>

<P><STRONG><a name="[d8]"></a>EmsA_T_D_And_BCAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsA_T_D_And_BCAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsA_T_D_And_BCAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_D_And_BCAuto_PN
</UL>

<P><STRONG><a name="[d9]"></a>EmsA_T_D_And_BC_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsA_T_D_And_BC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsA_T_D_And_BC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_D_And_BC_No_PN
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_D_And_BC_No
</UL>

<P><STRONG><a name="[da]"></a>EmsA_T_D_And_B_T_C</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsA_T_D_And_B_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsA_T_D_And_B_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_D_And_B_T_C
</UL>

<P><STRONG><a name="[db]"></a>EmsA_T_D_And_C_T_B</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsA_T_D_And_C_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsA_T_D_And_C_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_D_And_C_T_B
</UL>

<P><STRONG><a name="[dc]"></a>EmsBCD_T_A_PN</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, ems_port.o(i.EmsBCD_T_A_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsBCD_T_A_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirCBD_T_A_PN
</UL>

<P><STRONG><a name="[dd]"></a>EmsB_T_A_And_CDAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsB_T_A_And_CDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsB_T_A_And_CDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_A_And_CDAuto_PN
</UL>

<P><STRONG><a name="[de]"></a>EmsB_T_A_And_CD_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsB_T_A_And_CD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsB_T_A_And_CD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_A_And_CD_No_PN
</UL>

<P><STRONG><a name="[df]"></a>EmsB_T_A_And_C_T_D</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsB_T_A_And_C_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsB_T_A_And_C_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_A_And_C_T_D
</UL>

<P><STRONG><a name="[e0]"></a>EmsB_T_A_And_D_T_C</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsB_T_A_And_D_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsB_T_A_And_D_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_A_And_D_T_C
</UL>

<P><STRONG><a name="[e1]"></a>EmsB_T_C_And_ADAuto_PN</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, ems_port.o(i.EmsB_T_C_And_ADAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsB_T_C_And_ADAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_C_And_ADAuto_PN
</UL>

<P><STRONG><a name="[e2]"></a>EmsB_T_C_And_AD_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsB_T_C_And_AD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsB_T_C_And_AD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_C_And_AD_No_PN
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_C_And_AD_No
</UL>

<P><STRONG><a name="[e3]"></a>EmsB_T_C_And_A_T_D</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsB_T_C_And_A_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsB_T_C_And_A_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_C_And_A_T_D
</UL>

<P><STRONG><a name="[e4]"></a>EmsB_T_C_And_D_T_A</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsB_T_C_And_D_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsB_T_C_And_D_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_C_And_D_T_A
</UL>

<P><STRONG><a name="[e5]"></a>EmsB_T_D_And_ACAuto_PN</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, ems_port.o(i.EmsB_T_D_And_ACAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsB_T_D_And_ACAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_D_And_ACAuto_PN
</UL>

<P><STRONG><a name="[e6]"></a>EmsB_T_D_And_AC_No_PN</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, ems_port.o(i.EmsB_T_D_And_AC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsB_T_D_And_AC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_D_And_AC_No_PN
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_D_And_AC_No
</UL>

<P><STRONG><a name="[e7]"></a>EmsB_T_D_And_A_T_C</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsB_T_D_And_A_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsB_T_D_And_A_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_D_And_A_T_C
</UL>

<P><STRONG><a name="[e8]"></a>EmsB_T_D_And_C_T_A</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsB_T_D_And_C_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsB_T_D_And_C_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_D_And_C_T_A
</UL>

<P><STRONG><a name="[e9]"></a>EmsC_T_A_And_BDAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsC_T_A_And_BDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsC_T_A_And_BDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_A_And_BDAuto_PN
</UL>

<P><STRONG><a name="[ea]"></a>EmsC_T_A_And_BD_No</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_A_And_BD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_A_And_BD_No &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_A_And_BD_No
</UL>

<P><STRONG><a name="[eb]"></a>EmsC_T_A_And_BD_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsC_T_A_And_BD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsC_T_A_And_BD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_A_And_BD_No_PN
</UL>

<P><STRONG><a name="[ec]"></a>EmsC_T_A_And_B_T_D</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_A_And_B_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_A_And_B_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_A_And_B_T_D
</UL>

<P><STRONG><a name="[ed]"></a>EmsC_T_A_And_D_T_B</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_A_And_D_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_A_And_D_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_A_And_D_T_B
</UL>

<P><STRONG><a name="[ee]"></a>EmsC_T_B_And_ADAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsC_T_B_And_ADAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsC_T_B_And_ADAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_B_And_ADAuto_PN
</UL>

<P><STRONG><a name="[ef]"></a>EmsC_T_B_And_AD_No</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_B_And_AD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_B_And_AD_No &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_B_And_AD_No
</UL>

<P><STRONG><a name="[f0]"></a>EmsC_T_B_And_AD_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsC_T_B_And_AD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsC_T_B_And_AD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_B_And_AD_No_PN
</UL>

<P><STRONG><a name="[f1]"></a>EmsC_T_B_And_A_T_D</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_B_And_A_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_B_And_A_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_B_And_A_T_D
</UL>

<P><STRONG><a name="[f2]"></a>EmsC_T_B_And_D_T_A</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_B_And_D_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_B_And_D_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_B_And_D_T_A
</UL>

<P><STRONG><a name="[f3]"></a>EmsC_T_D_And_ABAuto_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsC_T_D_And_ABAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsC_T_D_And_ABAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_D_And_ABAuto_PN
</UL>

<P><STRONG><a name="[f4]"></a>EmsC_T_D_And_AB_No</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_D_And_AB_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_D_And_AB_No &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_D_And_AB_No
</UL>

<P><STRONG><a name="[f5]"></a>EmsC_T_D_And_AB_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsC_T_D_And_AB_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsC_T_D_And_AB_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_D_And_AB_No_PN
</UL>

<P><STRONG><a name="[f6]"></a>EmsC_T_D_And_A_T_B</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_D_And_A_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_D_And_A_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_D_And_A_T_B
</UL>

<P><STRONG><a name="[f7]"></a>EmsC_T_D_And_B_T_A</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsC_T_D_And_B_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsC_T_D_And_B_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirC_T_D_And_B_T_A
</UL>

<P><STRONG><a name="[f8]"></a>EmsD_T_A_And_BC_AutO_PN</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, ems_port.o(i.EmsD_T_A_And_BC_AutO_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsD_T_A_And_BC_AutO_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_A_And_BC_AutO_PN
</UL>

<P><STRONG><a name="[f9]"></a>EmsD_T_A_And_BC_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsD_T_A_And_BC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsD_T_A_And_BC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_A_And_CB_No
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_A_And_BC_No_PN
</UL>

<P><STRONG><a name="[fa]"></a>EmsD_T_A_And_B_T_C</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsD_T_A_And_B_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsD_T_A_And_B_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_A_And_B_T_C
</UL>

<P><STRONG><a name="[fb]"></a>EmsD_T_A_And_C_T_B</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.EmsD_T_A_And_C_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmsD_T_A_And_C_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_A_And_C_T_B
</UL>

<P><STRONG><a name="[fc]"></a>EmsD_T_B_And_AC_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsD_T_B_And_AC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsD_T_B_And_AC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_B_And_AC_No_PN
</UL>

<P><STRONG><a name="[fd]"></a>EmsD_T_C_And_AB_No_PN</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ems_port.o(i.EmsD_T_C_And_AB_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmsD_T_C_And_AB_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirD_T_C_And_AB_No_PN
</UL>

<P><STRONG><a name="[101]"></a>Ems_AB_And_CD_Discharge</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ems_port.o(i.Ems_AB_And_CD_Discharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_AB_And_CD_Discharge &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirAB_And_CD_DisCharge
</UL>

<P><STRONG><a name="[40]"></a>Ems_AB_And_CD_Four</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ems_port.o(i.Ems_AB_And_CD_Four))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_AB_And_CD_Four &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>Ems_AToB_And_Ems_CToD_PNAlter_N</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, ems_port.o(i.Ems_AToB_And_Ems_CToD_PNAlter_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_AToB_And_Ems_CToD_PNAlter_N &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>Ems_AToB_And_Ems_CToD_PNAlter_P</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, ems_port.o(i.Ems_AToB_And_Ems_CToD_PNAlter_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_AToB_And_Ems_CToD_PNAlter_P &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>Ems_AToB_Ems_CToD_FS_N</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.Ems_AToB_Ems_CToD_FS_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_AToB_Ems_CToD_FS_N &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>Ems_AToB_Ems_CToD_FS_P</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.Ems_AToB_Ems_CToD_FS_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_AToB_Ems_CToD_FS_P &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>Ems_A_T_B_And_CD_No_PN</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, ems_port.o(i.Ems_A_T_B_And_CD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ems_A_T_B_And_CD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_B_And_CD_No_PN
</UL>

<P><STRONG><a name="[3f]"></a>Ems_A_To_Ems_B_Double</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_Double))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_Double &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>Ems_A_To_Ems_B_FS_N</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_FS_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_FS_N &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirB_T_A_And_CD_No
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_B_And_CD_No
</UL>

<P><STRONG><a name="[104]"></a>Ems_A_To_Ems_B_FS_P</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_FS_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_FS_P &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DirA_T_B_And_CD_No
</UL>

<P><STRONG><a name="[47]"></a>Ems_A_To_Ems_B_PNAlter_N</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_PNAlter_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_PNAlter_N &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>Ems_A_To_Ems_B_PNAlter_P</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_PNAlter_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_PNAlter_P &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>Ems_A_To_Ems_B_Single_N</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_Single_N))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_Single_N &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>Ems_A_To_Ems_B_Single_P</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ems_port.o(i.Ems_A_To_Ems_B_Single_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ems_A_To_Ems_B_Single_P &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>Ems_Output_Close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ems.o(i.Ems_Output_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ems_Output_Close &rArr; Boost_Pwm &rArr; Adt_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_Pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
</UL>

<P><STRONG><a name="[10c]"></a>Ems_ParaInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ems.o(i.Ems_ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ems_ParaInit &rArr; Ems_IDLEParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_IDLEParaInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_3DParaInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_2DParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Massage_Mode_update
</UL>

<P><STRONG><a name="[be]"></a>Ems_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ems.o(i.Ems_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ems_Start &rArr; TimestampStart &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampStart
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSTimeInit
</UL>

<P><STRONG><a name="[95]"></a>EnableNvic</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, interrupts_hc32l136.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Check_Pin_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
</UL>

<P><STRONG><a name="[76]"></a>ErrIntCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uarthandler.o(i.ErrIntCallback))
<BR>[Address Reference Count : 1]<UL><LI> uarthandler.o(i.UartInit)
</UL>
<P><STRONG><a name="[10f]"></a>ExtTrigInterrupteRouseDisable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(i.ExtTrigInterrupteRouseDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ExtTrigInterrupteRouseDisable &rArr; KeyDisableIRQ &rArr; Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDisableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchTrigTouchKeyInitDisable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>Flash_WaitCycle</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, flash.o(i.Flash_WaitCycle))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[115]"></a>Gpio_ClearIrq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>Gpio_ClrIO</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ClrIO))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_1_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_vibration_Control
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Status_Control
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_temperature_Control
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Single_P
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Single_N
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_PNAlter_P
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_PNAlter_N
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_P
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_N
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Double
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_T_B_And_CD_No_PN
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_Ems_CToD_FS_P
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_Ems_CToD_FS_N
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_And_Ems_CToD_PNAlter_P
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_And_Ems_CToD_PNAlter_N
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Four
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Discharge
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_C_And_AB_No_PN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_B_And_AC_No_PN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_C_T_B
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_B_T_C
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_No_PN
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_AutO_PN
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_B_T_A
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_A_T_B
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No_PN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_ABAuto_PN
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_D_T_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_A_T_D
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No_PN
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_ADAuto_PN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_D_T_B
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_B_T_D
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No_PN
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BDAuto_PN
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_C_T_A
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_A_T_C
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_AC_No_PN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_ACAuto_PN
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_D_T_A
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_A_T_D
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_AD_No_PN
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_ADAuto_PN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_D_T_C
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_C_T_D
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CD_No_PN
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CDAuto_PN
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsBCD_T_A_PN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_C_T_B
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_B_T_C
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BC_No_PN
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BCAuto_PN
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_D_T_B
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_B_T_D
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BD_No_PN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BDAuto_PN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_D_T_C
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_C_T_D
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_CDAuto_PN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsADAuto_And_BCAuto_PN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACD_T_B_PN
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACAutO_And_BDAuto_PN
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABD_T_C_PN
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABC_T_D_PN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABAuto_And_CDAuto_PN
</UL>

<P><STRONG><a name="[ab]"></a>Gpio_DisableIrq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(i.Gpio_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDisableIRQ
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchTrigTouchKeyInitDisable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Disable_IRQ
</UL>

<P><STRONG><a name="[c0]"></a>Gpio_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(i.Gpio_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Check_Pin_Init
</UL>

<P><STRONG><a name="[a8]"></a>Gpio_GetInputIO</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetInputIO))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchStatusScan
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Pin_Scan
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Compl_Status_Check
</UL>

<P><STRONG><a name="[114]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetIrqStatus))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>Gpio_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, key.o(i.Gpio_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[8b]"></a>Gpio_Init</STRONG> (Thumb, 318 bytes, Stack size 12 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_1_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heater_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchTrigTouchKeyInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Check_Pin_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Pin_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Compl_Status_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[14c]"></a>Gpio_SetAfMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(i.Gpio_SetAfMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gpio_SetAfMode
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[8a]"></a>Gpio_SetAnalogMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_SetAnalogMode))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
</UL>

<P><STRONG><a name="[ca]"></a>Gpio_SetIO</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heater_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_vibration_Control
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Status_Control
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_temperature_Control
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Temperature_Close
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Single_P
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Single_N
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_PNAlter_P
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_PNAlter_N
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_P
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_N
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Double
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_T_B_And_CD_No_PN
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_Ems_CToD_FS_P
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_Ems_CToD_FS_N
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_And_Ems_CToD_PNAlter_P
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_And_Ems_CToD_PNAlter_N
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Four
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Discharge
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_C_And_AB_No_PN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_B_And_AC_No_PN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_C_T_B
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_B_T_C
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_No_PN
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_AutO_PN
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_B_T_A
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_A_T_B
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No_PN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_ABAuto_PN
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_D_T_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_A_T_D
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No_PN
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_ADAuto_PN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_D_T_B
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_B_T_D
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No_PN
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BDAuto_PN
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_C_T_A
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_A_T_C
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_AC_No_PN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_ACAuto_PN
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_D_T_A
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_A_T_D
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_AD_No_PN
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_ADAuto_PN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_D_T_C
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_C_T_D
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CD_No_PN
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CDAuto_PN
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsBCD_T_A_PN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_C_T_B
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_B_T_C
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BC_No_PN
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BCAuto_PN
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_D_T_B
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_B_T_D
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BD_No_PN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BDAuto_PN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_D_T_C
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_C_T_D
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_CDAuto_PN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsADAuto_And_BCAuto_PN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACD_T_B_PN
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACAutO_And_BDAuto_PN
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABD_T_C_PN
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABC_T_D_PN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABAuto_And_CDAuto_PN
</UL>

<P><STRONG><a name="[116]"></a>HallSwitchStatusScan</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, key.o(i.HallSwitchStatusScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HallSwitchStatusScan
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>HallSwitchTrigTouchKeyInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, key.o(i.HallSwitchTrigTouchKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HallSwitchTrigTouchKeyInit &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[4b]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>Heater_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ledmotor.o(i.Heater_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Heater_Init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[4f]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ000_Handler &rArr; Gpio_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ001_Handler &rArr; Gpio_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ002_Handler &rArr; Gpio_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ003_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ003_Handler &rArr; Gpio_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ004_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ004_Handler &rArr; Dma_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ005_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ009_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ011_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ013_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ014_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ015_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ016_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ025_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcnt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ029_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>KeyHandler</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, main.o(i.KeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KeyHandler &rArr; Ems_ParaInit &rArr; Ems_IDLEParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>LPUart_CalScnt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lpuart.o(i.LPUart_CalScnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LPUart_CalScnt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[131]"></a>LPUart_ClrStatus</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_ClrStatus &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[132]"></a>LPUart_EnableFunc</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableFunc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[133]"></a>LPUart_EnableIrq</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_EnableIrq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[134]"></a>LPUart_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lpuart.o(i.LPUart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LPUart_Init &rArr; LPUart_SetClkDiv &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetClkDiv
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetStopBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SelSclk
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[135]"></a>LPUart_SelSclk</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SelSclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SelSclk &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[139]"></a>LPUart_SetBaud</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SetBaud &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[136]"></a>LPUart_SetClkDiv</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SetClkDiv &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[13a]"></a>LPUart_SetMMDOrCk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SetMMDOrCk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SetMMDOrCk &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[137]"></a>LPUart_SetMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SetMode &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[13b]"></a>LPUart_SetMultiMode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SetMultiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SetMultiMode &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[138]"></a>LPUart_SetStopBit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lpuart.o(i.LPUart_SetStopBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUart_SetStopBit &rArr; LPUartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
</UL>

<P><STRONG><a name="[11a]"></a>Led_1_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ledmotor.o(i.Led_1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Led_1_Init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[11c]"></a>Motor_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ledmotor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_Init &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[a1]"></a>NTCSampleDataHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ntctempsample.o(i.NTCSampleDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NTCSampleDataHandler &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[77]"></a>PErrIntCallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uarthandler.o(i.PErrIntCallBack))
<BR>[Address Reference Count : 1]<UL><LI> uarthandler.o(i.UartInit)
</UL>
<P><STRONG><a name="[74]"></a>RxIntCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uarthandler.o(i.RxIntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RxIntCallback &rArr; Uart_ReceiveData &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uarthandler.o(i.UartInit)
</UL>
<P><STRONG><a name="[9f]"></a>SampleFilterFloatHandler</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, util.o(i.SampleFilterFloatHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SampleFilterFloatHandler &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[9e]"></a>SampleFilterHandler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, util.o(i.SampleFilterHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SampleFilterHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[13f]"></a>SoftTimerCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.SoftTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2Int
</UL>

<P><STRONG><a name="[141]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[143]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[88]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_1_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heater_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Check_Pin_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Pin_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Compl_Status_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[b6]"></a>Sysctrl_SetRCHTrim</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCHTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetRCHTrim &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit24M
</UL>

<P><STRONG><a name="[b7]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit24M
</UL>

<P><STRONG><a name="[145]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[70]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>Tim2Int</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timehandler.o(i.Tim2Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tim2Int &rArr; Bt_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerCount
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timehandler.o(i.Update2Time)
</UL>
<P><STRONG><a name="[14a]"></a>Tim3_ClearIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer3.o(i.Tim3_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3IntCallback
</UL>

<P><STRONG><a name="[149]"></a>Tim3_GetIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3IntCallback
</UL>

<P><STRONG><a name="[15a]"></a>Tim3_M23_ARRSet</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, timer3.o(i.Tim3_M23_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Tim3_M23_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[148]"></a>Tim3_M23_CCR_Set</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, timer3.o(i.Tim3_M23_CCR_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3_M23_CCR_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Breathing_Light_Duty
</UL>

<P><STRONG><a name="[15d]"></a>Tim3_M23_Cnt16Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M23_Cnt16Set))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[15e]"></a>Tim3_M23_EnPWM_Output</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, timer3.o(i.Tim3_M23_EnPWM_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Tim3_M23_EnPWM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[15b]"></a>Tim3_M23_PortOutput_Config</STRONG> (Thumb, 686 bytes, Stack size 12 bytes, timer3.o(i.Tim3_M23_PortOutput_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Tim3_M23_PortOutput_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[15f]"></a>Tim3_M23_Run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M23_Run))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[15c]"></a>Tim3_M23_SetValidPeriod</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M23_SetValidPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[159]"></a>Tim3_Mode23_Init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, timer3.o(i.Tim3_Mode23_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3_Mode23_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[123]"></a>Tim_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bt.o(i.Tim_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[12e]"></a>Time3Breathing_Light_Duty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timehandler.o(i.Time3Breathing_Light_Duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Time3Breathing_Light_Duty &rArr; Tim3_M23_CCR_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_CCR_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Status_Control
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>

<P><STRONG><a name="[bd]"></a>TimeBoostPwmInit</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, timehandler.o(i.TimeBoostPwmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimeBoostPwmInit &rArr; Adt_Init &rArr; AdtEnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitCycle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_StartCount
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_SetPeriod
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_SetCompareValue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_CHxXPortConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSTimeInit
</UL>

<P><STRONG><a name="[bc]"></a>TimestampInit</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, timehandler.o(i.TimestampInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimestampInit &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitCycle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode23_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode23_EnableIrq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_SetValidPeriod
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_Run
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_Cnt16Set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_ARRSet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearAllIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSTimeInit
</UL>

<P><STRONG><a name="[10d]"></a>TimestampStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timehandler.o(i.TimestampStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimestampStart &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode23_EnableIrq
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_Run
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearAllIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Start
</UL>

<P><STRONG><a name="[ff]"></a>TimestampUpdateFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timehandler.o(i.TimestampUpdateFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_Cnt16Set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmIdleHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmCHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Massage3DModelPwmCHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_IDLEParaInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_3DParaInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_2DParaInit
</UL>

<P><STRONG><a name="[75]"></a>TxIntCallback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uarthandler.o(i.TxIntCallback))
<BR>[Address Reference Count : 1]<UL><LI> uarthandler.o(i.UartInit)
</UL>
<P><STRONG><a name="[162]"></a>UartDataParseHandler</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, uarthandler.o(i.UartDataParseHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>UartInit</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, uarthandler.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UartInit &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMultiMode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMMDOrCk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetClkDiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetBaud
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_CalScnt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[156]"></a>Uart_PortInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uarthandler.o(i.Uart_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart_PortInit &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[13e]"></a>Uart_ReceiveData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(i.Uart_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_ReceiveData &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxIntCallback
</UL>

<P><STRONG><a name="[11f]"></a>Update2Time</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, timehandler.o(i.Update2Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Update2Time &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode23_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode23_EnableIrq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_SetValidPeriod
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_Run
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_EnPWM_Output
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_Cnt16Set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M23_ARRSet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearAllIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[a2]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigSqrChannel
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSControlHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Status_Control
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_PwmControl
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmIdleHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassagePwmCHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[174]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[176]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11b]"></a>breathing_LightInit</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, timehandler.o(i.breathing_LightInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = breathing_LightInit &rArr; Time3Breathing_Light_Duty &rArr; Tim3_M23_CCR_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode23_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_SetValidPeriod
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_Run
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_PortOutput_Config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_EnPWM_Output
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_Cnt16Set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_CCR_Set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M23_ARRSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Breathing_Light_Duty
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[89]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_1_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heater_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchTrigTouchKeyInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_PortInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>

<P><STRONG><a name="[b8]"></a>delay10us</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ddl.o(i.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay10us &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit24M
</UL>

<P><STRONG><a name="[cb]"></a>delay1us</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ddl.o(i.delay1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Single_P
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Single_N
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_PNAlter_P
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_PNAlter_N
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_P
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_N
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_Double
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_T_B_And_CD_No_PN
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_Ems_CToD_FS_P
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_Ems_CToD_FS_N
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_And_Ems_CToD_PNAlter_P
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AToB_And_Ems_CToD_PNAlter_N
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Four
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Discharge
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_C_And_AB_No_PN
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_B_And_AC_No_PN
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_C_T_B
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_B_T_C
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_No_PN
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_AutO_PN
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_B_T_A
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_A_T_B
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No_PN
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_ABAuto_PN
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_D_T_A
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_A_T_D
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No_PN
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_ADAuto_PN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_D_T_B
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_B_T_D
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No_PN
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BDAuto_PN
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_C_T_A
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_A_T_C
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_AC_No_PN
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_ACAuto_PN
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_D_T_A
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_A_T_D
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_AD_No_PN
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_ADAuto_PN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_D_T_C
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_C_T_D
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CD_No_PN
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CDAuto_PN
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsBCD_T_A_PN
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_C_T_B
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_B_T_C
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BC_No_PN
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BCAuto_PN
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_D_T_B
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_B_T_D
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BD_No_PN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BDAuto_PN
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_D_T_C
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_C_T_D
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_CDAuto_PN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsADAuto_And_BCAuto_PN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACD_T_B_PN
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACAutO_And_BDAuto_PN
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABD_T_C_PN
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABC_T_D_PN
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABAuto_And_CDAuto_PN
</UL>

<P><STRONG><a name="[160]"></a>keyScan</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, key.o(i.keyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyScan
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; HardWareInit &rArr; UartInit &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyScan
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchStatusScan
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtTrigInterrupteRouseDisable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Delay_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_vibration_Control
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Status_Control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Status_Check
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDataInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkInit24M
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Status_Check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataParseHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>Time0IntCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timehandler.o(i.Time0IntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Time0IntCallback &rArr; EMS_PwmControl &rArr; Massage3DModelPwmCHandler &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_PwmControl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timehandler.o(i.TimestampInit)
</UL>
<P><STRONG><a name="[7a]"></a>Time3IntCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timehandler.o(i.Time3IntCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time3IntCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_GetIntFlag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timehandler.o(i.breathing_LightInit)
</UL>
<P><STRONG><a name="[9b]"></a>AdcSampleTask</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, main.o(i.AdcSampleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AdcSampleTask &rArr; SampleFilterFloatHandler &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilterFloatHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTCSampleDataHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SQR_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternBoardCheckHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>Battery_Status_Check</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.Battery_Status_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Battery_Status_Check &rArr; Battery_Chg_Status_Pin_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Pin_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>ClkInit24M</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.ClkInit24M))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ClkInit24M &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>DeviceDataInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.DeviceDataInit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>EMSTimeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.EMSTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EMSTimeInit &rArr; TimeBoostPwmInit &rArr; Adt_Init &rArr; AdtEnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeBoostPwmInit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[c7]"></a>EMS_Status_Check</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.EMS_Status_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EMS_Status_Check &rArr; EMS_Port_Pin_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Pin_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>Ems_CallTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.Ems_CallTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Ems_CallTask &rArr; EMSControlHandler &rArr; BoostVoltageControl &rArr; Boost_Pwm &rArr; Adt_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSControlHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
</UL>

<P><STRONG><a name="[106]"></a>Ems_Control_F</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, main.o(i.Ems_Control_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Ems_Control_F &rArr; Ems_CallTask &rArr; EMSControlHandler &rArr; BoostVoltageControl &rArr; Boost_Pwm &rArr; Adt_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Output_Close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Compl_Status_Check
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_temperature_Control
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heat_Temperature_Close
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_CallTask
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>Ems_Massage_Mode_update</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.Ems_Massage_Mode_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Ems_Massage_Mode_update &rArr; Ems_ParaInit &rArr; Ems_IDLEParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternBoardCheckHandler
</UL>

<P><STRONG><a name="[a0]"></a>ExternBoardCheckHandler</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(i.ExternBoardCheckHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ExternBoardCheckHandler &rArr; Ems_Massage_Mode_update &rArr; Ems_ParaInit &rArr; Ems_IDLEParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareParaSize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Massage_Mode_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleTask
</UL>

<P><STRONG><a name="[118]"></a>HardWareInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HardWareInit &rArr; UartInit &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_1_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heater_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallSwitchTrigTouchKeyInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Port_Check_Pin_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Status_Pin_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Chg_Compl_Status_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheralInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSTimeInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breathing_LightInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update2Time
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>Heat_Temperature_Close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.Heat_Temperature_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Heat_Temperature_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
</UL>

<P><STRONG><a name="[107]"></a>Heat_temperature_Control</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.Heat_temperature_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Heat_temperature_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control_F
</UL>

<P><STRONG><a name="[12d]"></a>LED_Status_Control</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, main.o(i.LED_Status_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Status_Control &rArr; Time3Breathing_Light_Duty &rArr; Tim3_M23_CCR_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time3Breathing_Light_Duty
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>LowPowerHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.LowPowerHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>Motor_vibration_Control</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, main.o(i.Motor_vibration_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_vibration_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>SoftTimeTask</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, main.o(i.SoftTimeTask))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerCount
</UL>

<P><STRONG><a name="[164]"></a>key_Delay_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.key_Delay_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>peripheralInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.peripheralInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = peripheralInit &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[aa]"></a>Battery_Chg_Status_Disable_IRQ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(i.Battery_Chg_Status_Disable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Battery_Chg_Status_Disable_IRQ &rArr; Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtTrigInterrupteRouseDisable
</UL>

<P><STRONG><a name="[111]"></a>HallSwitchTrigTouchKeyInitDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(i.HallSwitchTrigTouchKeyInitDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HallSwitchTrigTouchKeyInitDisable &rArr; Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtTrigInterrupteRouseDisable
</UL>

<P><STRONG><a name="[110]"></a>KeyDisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, key.o(i.KeyDisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KeyDisableIRQ &rArr; Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtTrigInterrupteRouseDisable
</UL>

<P><STRONG><a name="[b0]"></a>BoostVoltageControl</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, ems.o(i.BoostVoltageControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BoostVoltageControl &rArr; Boost_Pwm &rArr; Adt_SetCompareValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boost_Pwm
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMSControlHandler
</UL>

<P><STRONG><a name="[fe]"></a>Ems_2DParaInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ems.o(i.Ems_2DParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ems_2DParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
</UL>

<P><STRONG><a name="[100]"></a>Ems_3DParaInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ems.o(i.Ems_3DParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ems_3DParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
</UL>

<P><STRONG><a name="[10a]"></a>Ems_IDLEParaInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ems.o(i.Ems_IDLEParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ems_IDLEParaInit &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_ParaInit
</UL>

<P><STRONG><a name="[c6]"></a>Massage3DModelPwmCHandler</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, ems.o(i.Massage3DModelPwmCHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Massage3DModelPwmCHandler &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_PwmControl
</UL>

<P><STRONG><a name="[c5]"></a>MassagePwmCHandler</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, ems.o(i.MassagePwmCHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MassagePwmCHandler &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_PwmControl
</UL>

<P><STRONG><a name="[c4]"></a>MassagePwmIdleHandler</STRONG> (Thumb, 530 bytes, Stack size 8 bytes, ems.o(i.MassagePwmIdleHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MassagePwmIdleHandler &rArr; TimestampUpdateFreq &rArr; Bt_M23_ARRSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampUpdateFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_PwmControl
</UL>

<P><STRONG><a name="[3d]"></a>ModifyOne</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ems.o(i.ModifyOne))
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>ModifyTwo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ems.o(i.ModifyTwo))
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>_DirABAuto_And_CDAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirABAuto_And_CDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirABAuto_And_CDAuto_PN &rArr; EmsABAuto_And_CDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABAuto_And_CDAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>_DirABC_T_D_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirABC_T_D_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirABC_T_D_PN &rArr; EmsABC_T_D_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABC_T_D_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>_DirABD_T_C_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirABD_T_C_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirABD_T_C_PN &rArr; EmsABD_T_C_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsABD_T_C_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>_DirAB_And_CD_DisCharge</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirAB_And_CD_DisCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirAB_And_CD_DisCharge &rArr; Ems_AB_And_CD_Discharge &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_AB_And_CD_Discharge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>_DirAB_And_CD_IDLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ems.o(i._DirAB_And_CD_IDLE))
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>_DirACAutO_And_BDAut0_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirACAutO_And_BDAut0_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirACAutO_And_BDAut0_PN &rArr; EmsACAutO_And_BDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACAutO_And_BDAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>_DirACD_T_B_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirACD_T_B_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirACD_T_B_PN &rArr; EmsACD_T_B_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsACD_T_B_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>_DirADAuto_And_BCAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirADAuto_And_BCAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirADAuto_And_BCAuto_PN &rArr; EmsADAuto_And_BCAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsADAuto_And_BCAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>_DirA_T_B_And_CDAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_B_And_CDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_B_And_CDAuto_PN &rArr; EmsA_T_B_And_CDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_CDAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>_DirA_T_B_And_CD_No</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ems.o(i._DirA_T_B_And_CD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_B_And_CD_No &rArr; Ems_A_To_Ems_B_FS_P &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_P
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_N
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>_DirA_T_B_And_CD_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_B_And_CD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_B_And_CD_No_PN &rArr; Ems_A_T_B_And_CD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_T_B_And_CD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_DirA_T_B_And_C_T_D</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirA_T_B_And_C_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_B_And_C_T_D &rArr; EmsA_T_B_And_C_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_C_T_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>_DirA_T_B_And_D_T_C</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirA_T_B_And_D_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_B_And_D_T_C &rArr; EmsA_T_B_And_D_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_B_And_D_T_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_DirA_T_C_And_BDAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_C_And_BDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_C_And_BDAuto_PN &rArr; EmsA_T_C_And_BDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BDAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>_DirA_T_C_And_BD_No</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_C_And_BD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_C_And_BD_No &rArr; EmsA_T_C_And_BD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>_DirA_T_C_And_BD_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_C_And_BD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_C_And_BD_No_PN &rArr; EmsA_T_C_And_BD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_BD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_DirA_T_C_And_B_T_D</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirA_T_C_And_B_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_C_And_B_T_D &rArr; EmsA_T_C_And_B_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_B_T_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_DirA_T_C_And_D_T_B</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirA_T_C_And_D_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_C_And_D_T_B &rArr; EmsA_T_C_And_D_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_C_And_D_T_B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_DirA_T_D_And_BCAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_D_And_BCAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_D_And_BCAuto_PN &rArr; EmsA_T_D_And_BCAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BCAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_DirA_T_D_And_BC_No</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_D_And_BC_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_D_And_BC_No &rArr; EmsA_T_D_And_BC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>_DirA_T_D_And_BC_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirA_T_D_And_BC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirA_T_D_And_BC_No_PN &rArr; EmsA_T_D_And_BC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_BC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_DirA_T_D_And_B_T_C</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirA_T_D_And_B_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_D_And_B_T_C &rArr; EmsA_T_D_And_B_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_B_T_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_DirA_T_D_And_C_T_B</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirA_T_D_And_C_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirA_T_D_And_C_T_B &rArr; EmsA_T_D_And_C_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsA_T_D_And_C_T_B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>_DirB_T_A_And_CDAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_A_And_CDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_A_And_CDAuto_PN &rArr; EmsB_T_A_And_CDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CDAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_DirB_T_A_And_CD_No</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_A_And_CD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_A_And_CD_No &rArr; Ems_A_To_Ems_B_FS_N &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_A_To_Ems_B_FS_N
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>_DirB_T_A_And_CD_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_A_And_CD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_A_And_CD_No_PN &rArr; EmsB_T_A_And_CD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_CD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>_DirB_T_A_And_C_T_D</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_A_And_C_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_A_And_C_T_D &rArr; EmsB_T_A_And_C_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_C_T_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>_DirB_T_A_And_D_T_C</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_A_And_D_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_A_And_D_T_C &rArr; EmsB_T_A_And_D_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_A_And_D_T_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>_DirB_T_C_And_ADAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_C_And_ADAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_C_And_ADAuto_PN &rArr; EmsB_T_C_And_ADAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_ADAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>_DirB_T_C_And_AD_No</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_C_And_AD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_C_And_AD_No &rArr; EmsB_T_C_And_AD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_AD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>_DirB_T_C_And_AD_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_C_And_AD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_C_And_AD_No_PN &rArr; EmsB_T_C_And_AD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_AD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_DirB_T_C_And_A_T_D</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_C_And_A_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_C_And_A_T_D &rArr; EmsB_T_C_And_A_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_A_T_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>_DirB_T_C_And_D_T_A</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_C_And_D_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_C_And_D_T_A &rArr; EmsB_T_C_And_D_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_C_And_D_T_A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>_DirB_T_D_And_ACAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_D_And_ACAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_D_And_ACAuto_PN &rArr; EmsB_T_D_And_ACAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_ACAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_DirB_T_D_And_AC_No</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_D_And_AC_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_D_And_AC_No &rArr; EmsB_T_D_And_AC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_AC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>_DirB_T_D_And_AC_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirB_T_D_And_AC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirB_T_D_And_AC_No_PN &rArr; EmsB_T_D_And_AC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_AC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>_DirB_T_D_And_A_T_C</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_D_And_A_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_D_And_A_T_C &rArr; EmsB_T_D_And_A_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_A_T_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_DirB_T_D_And_C_T_A</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirB_T_D_And_C_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirB_T_D_And_C_T_A &rArr; EmsB_T_D_And_C_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsB_T_D_And_C_T_A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>_DirCBD_T_A_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirCBD_T_A_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirCBD_T_A_PN &rArr; EmsBCD_T_A_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsBCD_T_A_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>_DirC_T_A_And_BDAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirC_T_A_And_BDAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirC_T_A_And_BDAuto_PN &rArr; EmsC_T_A_And_BDAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BDAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>_DirC_T_A_And_BD_No</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_A_And_BD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_A_And_BD_No &rArr; EmsC_T_A_And_BD_No &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>_DirC_T_A_And_BD_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirC_T_A_And_BD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirC_T_A_And_BD_No_PN &rArr; EmsC_T_A_And_BD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_BD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>_DirC_T_A_And_B_T_D</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_A_And_B_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_A_And_B_T_D &rArr; EmsC_T_A_And_B_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_B_T_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>_DirC_T_A_And_D_T_B</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_A_And_D_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_A_And_D_T_B &rArr; EmsC_T_A_And_D_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_A_And_D_T_B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>_DirC_T_B_And_ADAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirC_T_B_And_ADAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirC_T_B_And_ADAuto_PN &rArr; EmsC_T_B_And_ADAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_ADAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>_DirC_T_B_And_AD_No</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_B_And_AD_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_B_And_AD_No &rArr; EmsC_T_B_And_AD_No &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>_DirC_T_B_And_AD_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirC_T_B_And_AD_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirC_T_B_And_AD_No_PN &rArr; EmsC_T_B_And_AD_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_AD_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>_DirC_T_B_And_A_T_D</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_B_And_A_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_B_And_A_T_D &rArr; EmsC_T_B_And_A_T_D &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_A_T_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>_DirC_T_B_And_D_T_A</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_B_And_D_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_B_And_D_T_A &rArr; EmsC_T_B_And_D_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_B_And_D_T_A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>_DirC_T_D_And_ABAuto_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirC_T_D_And_ABAuto_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirC_T_D_And_ABAuto_PN &rArr; EmsC_T_D_And_ABAuto_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_ABAuto_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>_DirC_T_D_And_AB_No</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_D_And_AB_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_D_And_AB_No &rArr; EmsC_T_D_And_AB_No &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>_DirC_T_D_And_AB_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirC_T_D_And_AB_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirC_T_D_And_AB_No_PN &rArr; EmsC_T_D_And_AB_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_AB_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>_DirC_T_D_And_A_T_B</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_D_And_A_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_D_And_A_T_B &rArr; EmsC_T_D_And_A_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_A_T_B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>_DirC_T_D_And_B_T_A</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirC_T_D_And_B_T_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirC_T_D_And_B_T_A &rArr; EmsC_T_D_And_B_T_A &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsC_T_D_And_B_T_A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>_DirD_T_A_And_BC_AutO_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirD_T_A_And_BC_AutO_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirD_T_A_And_BC_AutO_PN &rArr; EmsD_T_A_And_BC_AutO_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_AutO_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>_DirD_T_A_And_BC_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirD_T_A_And_BC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirD_T_A_And_BC_No_PN &rArr; EmsD_T_A_And_BC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>_DirD_T_A_And_B_T_C</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirD_T_A_And_B_T_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirD_T_A_And_B_T_C &rArr; EmsD_T_A_And_B_T_C &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_B_T_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>_DirD_T_A_And_CB_No</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirD_T_A_And_CB_No))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirD_T_A_And_CB_No &rArr; EmsD_T_A_And_BC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_BC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>_DirD_T_A_And_C_T_B</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ems.o(i._DirD_T_A_And_C_T_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DirD_T_A_And_C_T_B &rArr; EmsD_T_A_And_C_T_B &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_A_And_C_T_B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>_DirD_T_B_And_AC_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirD_T_B_And_AC_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirD_T_B_And_AC_No_PN &rArr; EmsD_T_B_And_AC_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_B_And_AC_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>_DirD_T_C_And_AB_No_PN</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ems.o(i._DirD_T_C_And_AB_No_PN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DirD_T_C_And_AB_No_PN &rArr; EmsD_T_C_And_AB_No_PN &rArr; delay1us
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmsD_T_C_And_AB_No_PN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ems.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>_GpioEnableIrq</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, gpio.o(i._GpioEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
</UL>

<P><STRONG><a name="[10e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[157]"></a>UartGetInternDataPtr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart.o(i.UartGetInternDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ReceiveData
</UL>

<P><STRONG><a name="[144]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(i._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
</UL>

<P><STRONG><a name="[a3]"></a>AdtEnableNvic</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adt.o(i.AdtEnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AdtEnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_Init
</UL>

<P><STRONG><a name="[a4]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adt.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdtEnableNvic
</UL>

<P><STRONG><a name="[a5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, adt.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdtEnableNvic
</UL>

<P><STRONG><a name="[130]"></a>LPUartGetInternDataPtr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lpuart.o(i.LPUartGetInternDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMultiMode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMMDOrCk
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetClkDiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetBaud
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableIrq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_EnableFunc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_ClrStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_CalScnt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetStopBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SetMode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUart_SelSclk
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[122]"></a>I2c_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ013_Handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
</UL>

<P><STRONG><a name="[12b]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ029_Handler
</UL>

<P><STRONG><a name="[124]"></a>LpTim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
</UL>

<P><STRONG><a name="[12a]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
</UL>

<P><STRONG><a name="[125]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
</UL>

<P><STRONG><a name="[128]"></a>Pcnt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ025_Handler
</UL>

<P><STRONG><a name="[127]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
</UL>

<P><STRONG><a name="[121]"></a>Spi_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ011_Handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[129]"></a>Vc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
</UL>

<P><STRONG><a name="[126]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
</UL>
<HR></body></html>
